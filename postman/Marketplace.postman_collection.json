{
	"info": {
		"_postman_id": "ecf0406d-5acc-43cb-ad45-109302009b30",
		"name": "Marketplace",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Provider Refresh Test Scripts",
			"item": [
				{
					"name": "PUT GitHub",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "0843ebb1-55a0-4238-b897-4114e1f11972",
								"exec": [
									"pm.request.headers.remove(\"Host\")"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "513c70c6-e4c4-4282-9806-049978e430aa",
								"exec": [
									"pm.environment.set(\"GIT_SHA\", pm.response.json()[\"content\"][\"sha\"])"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "88d5f1a708ef08afefeef3df111ff21a1f280a63",
									"type": "string"
								},
								{
									"key": "username",
									"value": "chintatarunkumar",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"message\": \"Add Refresh File\",\r\n  \"committer\": {\r\n    \"name\": \"Tarun Kumar Chinta\",\r\n    \"email\": \"chinta.tarunkumar@gamil.com\"\r\n  },\r\n  \"content\": \"ewogICAgInByb3ZpZGVySWQiOiAiNTVjYTM2M2MtNGViZS00ZTNmLThkMWYtMzhlZmY1NmNjMTc2IiwKICAgICJuYW1lIjogIk1hbmlmZXN0X1Byb3ZpZGVyX1JlZnJlc2giLAogICAgImRldGFpbHMiOiAiQXp1cmUgTWFuYWdlZCBTZXJ2aWNlIFByb3ZpZGVyIiwKICAgICJ2ZXJzaW9uIjogIjEuMC4wIiwKICAgICJicm9rZXJWZXJzaW9uIjogIjIuMTQiLAogICAgInVybCI6ICJodHRwOi8vb3NiLXRlc3Qtc2FtcGxlLWJyb2tlciIKfQoK\"\r\n}"
						},
						"url": {
							"raw": "https://api.github.com/repos/chintatarunkumar/manifest/contents/devops/refresh.json",
							"protocol": "https",
							"host": [
								"api",
								"github",
								"com"
							],
							"path": [
								"repos",
								"chintatarunkumar",
								"manifest",
								"contents",
								"devops",
								"refresh.json"
							]
						}
					},
					"response": []
				},
				{
					"name": "PUT Provider - Refresh",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f0b471a5-54b8-4b12-a278-2a498b5e817f",
								"exec": [
									"pm.test(\"Validate GET v1/providers Response Code\", function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Validate GET v1/providers Response Code\", function() {",
									"    var flag = 0",
									"    for (var i = 0; i < pm.response.json().length; i++) {",
									"        if(pm.response.json()[i][\"displayName\"] == \"Manifest_Provider_Refresh\"){",
									"            flag = 1",
									"        }",
									"    }",
									"    var assert = require('assert');",
									"    assert(flag == 1, \"Put v1/provider refresh failed\");",
									"});",
									"",
									"pm.test(\"412 GET Provider v1/providers\", () => {",
									"    pm.response.to.have.header(\"X-Request-ID\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "{{URL}}/v1/providers",
							"host": [
								"{{URL}}"
							],
							"path": [
								"v1",
								"providers"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE GitHub",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "aa957d51-730b-4edd-bb1f-e6aab8938e47",
								"exec": [
									"pm.request.headers.remove(\"Host\")"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "5c64cfdf-e870-4788-b2f2-471702ec4af2",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "88d5f1a708ef08afefeef3df111ff21a1f280a63",
									"type": "string"
								},
								{
									"key": "username",
									"value": "chintatarunkumar",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"message\": \"Delete Refresh File\",\r\n  \"committer\": {\r\n    \"name\": \"Tarun Kumar Chinta\",\r\n    \"email\": \"chinta.tarunkumar@gamil.com\"\r\n  },\r\n  \"sha\": \"{{GIT_SHA}}\"\r\n}"
						},
						"url": {
							"raw": "https://api.github.com/repos/chintatarunkumar/manifest/contents/devops/refresh.json",
							"protocol": "https",
							"host": [
								"api",
								"github",
								"com"
							],
							"path": [
								"repos",
								"chintatarunkumar",
								"manifest",
								"contents",
								"devops",
								"refresh.json"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Marketplace",
			"item": [
				{
					"name": "GET Healthz",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3c7b875f-e2f3-47aa-8def-e08a69268fcb",
								"exec": [
									"pm.test(\"Validate GET healthz Response Code\", function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Validate GET Response Body\", function() {",
									"    pm.expect(pm.response.text()).to.include(\"OK\");",
									"});",
									"",
									"if (pm.expect(pm.environment.get(\"TOKEN\")) != \"TESTTOKEN\") {",
									"    postman.setNextRequest('GET Provider - Manifest Test');",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{URL}}/healthz",
							"host": [
								"{{URL}}"
							],
							"path": [
								"healthz"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET Token For User",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f5315af6-fa20-4cab-8bac-87e5fd8e1a03",
								"exec": [
									"pm.test(\"Successful POST request\", function() {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
									"});",
									"pm.environment.set(\"token\", pm.response.json().access_token);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "9311e520-750c-4b5b-a610-b5769141e77a",
								"exec": [
									"pm.request.headers.remove('Host');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"grant_type\": \"password\",\n    \"client_id\": \"testpublic\",\n    \"username\": \"{{USERNAME}}\",\n    \"password\": \"{{PASSWORD}}\",\n    \"tenant_id\": \"master\"\n}"
						},
						"url": {
							"raw": "{{IAMURL}}/identity/token",
							"host": [
								"{{IAMURL}}"
							],
							"path": [
								"identity",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET Provider - Manifest Test",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f0b471a5-54b8-4b12-a278-2a498b5e817f",
								"exec": [
									"pm.test(\"Validate GET v1/providers Response Code\", function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Validate GET v1/providers Manifest displayName\", () => {",
									"    var flag = 0",
									"    for (var i = 0; i < pm.response.json().members.length; i++) {",
									"        if (pm.response.json().members[i].displayName === \"Manifest_Provider\") {",
									"            pm.environment.set(\"Manifest_providerId\", pm.response.json().members[i].providerId);",
									"            flag = 1",
									"        }",
									"    }",
									"    var assert = require('assert');",
									"    assert(flag == 1, \"Get v1/provider was unable to fetch the information from manifest\");",
									"});",
									"",
									"pm.test(\"412 GET Provider v1/providers\", () => {",
									"    pm.response.to.have.header(\"X-Request-ID\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{URL}}/v1/providers",
							"host": [
								"{{URL}}"
							],
							"path": [
								"v1",
								"providers"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST Provider",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fadf1d70-fd00-4add-88da-0397e818cc44",
								"exec": [
									"pm.test(\"Validate POST v1/provider Response Code\", function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const catalogBodySchema = {",
									"    \"required\": [\"providerId\"],",
									"    \"properties\": {",
									"        \"providerId\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"displayName\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"url\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"createdAt\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"updatedAt\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"metadata\": {},",
									"        \"serviceType\": {}",
									"    }",
									"};",
									"",
									"var catalogBody = JSON.parse(responseBody);",
									"tests[\"Validate POST /v1/provider Body Schema\"] = tv4.validate(catalogBody, catalogBodySchema);",
									"",
									"pm.test(\"412 Validate POST Provider v1/providers providerId\", () => {",
									"    pm.response.to.have.header(\"X-Request-ID\");",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "a00c4a10-7b58-49a6-ba3b-ebc10d30b725",
								"exec": [
									"var uuid = require('uuid');",
									"pm.environment.set(\"providerId\", uuid.v4())"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"providerId\": \"{{providerId}}\",\n\t\"displayName\": \"Marketplace\",\n\t\"url\": \"{{Broker_URL}}\"\n}"
						},
						"url": {
							"raw": "{{URL}}/v1/providers",
							"host": [
								"{{URL}}"
							],
							"path": [
								"v1",
								"providers"
							]
						}
					},
					"response": []
				},
				{
					"name": "401 Validate POST Provider",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fadf1d70-fd00-4add-88da-0397e818cc44",
								"exec": [
									"pm.test(\"401 Validate POST Provider v1/providers Response Code\", function() {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test(\"401 Validate POST Provider v1/providers providerId\", () => {",
									"    pm.expect(pm.response.json().errorCode).to.equal(\"UNAUTHORIZED\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"displayName\": \"marketplace\",\n\t\"url\": \"{{Broker_URL}}\"\n}"
						},
						"url": {
							"raw": "{{URL}}/v1/providers",
							"host": [
								"{{URL}}"
							],
							"path": [
								"v1",
								"providers"
							]
						}
					},
					"response": []
				},
				{
					"name": "Negative POST Provider",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a74d1685-ed32-48c4-a221-e0fbf2320c51",
								"exec": [
									"pm.test(\"Validate Negative POST v1/provider Response Code\", function() {",
									"    pm.response.to.have.status(400);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"displayName\": 123,\n\t\"url\": 123\n}"
						},
						"url": {
							"raw": "{{URL}}/v1/providers",
							"host": [
								"{{URL}}"
							],
							"path": [
								"v1",
								"providers"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET Provider",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f0b471a5-54b8-4b12-a278-2a498b5e817f",
								"exec": [
									"pm.test(\"Validate GET v1/providers Response Code\", function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"function getProviderId(providerArray, name) {",
									"    for (var i = 0; i < providerArray.length; i++) {",
									"        if (providerArray[i].displayName === name)",
									"            return providerArray[i].providerId;",
									"    }",
									"}",
									"",
									"pm.test(\"Validate GET v1/providers providerId\", () => {",
									"    pm.expect(getProviderId(pm.response.json().members, \"Marketplace\")).to.equal(pm.environment.get(\"providerId\"));",
									"});",
									"",
									"pm.test(\"412 GET Provider v1/providers\", () => {",
									"    pm.response.to.have.header(\"X-Request-ID\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{URL}}/v1/providers",
							"host": [
								"{{URL}}"
							],
							"path": [
								"v1",
								"providers"
							]
						}
					},
					"response": []
				},
				{
					"name": "401 Validate GET Provider",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f0b471a5-54b8-4b12-a278-2a498b5e817f",
								"exec": [
									"pm.test(\"401 Validate GET Provider v1/providers Response Code\", function() {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test(\"401 Validate GET Provider v1/providers providerId\", () => {",
									"    pm.expect(pm.response.json().errorCode).to.equal(\"UNAUTHORIZED\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{URL}}/v1/providers",
							"host": [
								"{{URL}}"
							],
							"path": [
								"v1",
								"providers"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET Provider by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7483b827-c5f0-459f-af0a-54fe4fd73c39",
								"exec": [
									"if (pm.expect(pm.environment.get(\"non-voting\")) === \"True\") {",
									"    pm.test(\"Validate GET v1/provider/ID Response Code\", function() {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    pm.test(\"Validate GET v1/provider/ID providerId\", () => {",
									"        pm.expect(pm.response.json().members[0][\"providerId\"]).to.equal(pm.environment.get(\"providerId\"));",
									"    });",
									"",
									"    pm.test(\"412 GET Provider by ID v1/providers providerId\", () => {",
									"        pm.response.to.have.header(\"X-Request-ID\");",
									"    });",
									"} else {",
									"    console.log(\"Response Code for GET v1/provider/ID is \" + pm.response.code + \"\\nExpected Response Code is 200\")",
									"    if (pm.response.code !== 200) {",
									"        console.log(\"Unable to validate responce body for GET v1/provider/ID.\\nAs responce code is \" + pm.response.code)",
									"    } else {",
									"        pm.test(\"Validate GET v1/provider/ID providerId\", () => {",
									"            pm.expect(pm.response.json().members[0][\"providerId\"]).to.equal(pm.environment.get(\"providerId\"));",
									"        });",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{URL}}/v1/providers/{{providerId}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"v1",
								"providers",
								"{{providerId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "401 Validate GET Provider by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7483b827-c5f0-459f-af0a-54fe4fd73c39",
								"exec": [
									"if (pm.expect(pm.environment.get(\"non-voting\")) === \"True\") {",
									"    pm.test(\"401 Validate GET Provider by ID v1/providers Response Code\", function() {",
									"        pm.response.to.have.status(401);",
									"    });",
									"",
									"    pm.test(\"401 Validate GET Provider by ID v1/providers providerId\", () => {",
									"        pm.expect(pm.response.json().errorCode).to.equal(\"UNAUTHORIZED\");",
									"    });",
									"} else {",
									"    console.log(\"Response Code for 401 Validate GET Provider by ID v1/provider/ID is \" + pm.response.code + \"\\nExpected Response Code is 200\")",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{URL}}/v1/providers/{{providerId}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"v1",
								"providers",
								"{{providerId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET Services",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b36a3e9a-d32a-4945-8aa0-b8bbba39e10e",
								"exec": [
									"if (pm.response.to.have.status(401)) {",
									"    console.log(\"Untrusted Broker\")",
									"} else {",
									"    pm.test(\"Validate GET v1/providers/:providerid/services Response Code\", function() {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    const serviceBodySchema = {",
									"        \"required\": [\"services\"],",
									"        \"properties\": {",
									"            \"services\": [{",
									"                \"id\": \"string\",",
									"                \"description\": \"string\",",
									"                \"name\": \"string\",",
									"                \"plans\": [{}]",
									"            }]",
									"        }",
									"    };",
									"",
									"    var serviceBody = JSON.parse(responseBody);",
									"    tests[\"Validate GET v1/providers/:providerid/services schema\"] = tv4.validate(serviceBody, serviceBodySchema);",
									"",
									"    pm.environment.set(\"serviceId\", pm.response.json().services[0].id);",
									"    pm.environment.set(\"planId\", pm.response.json().services[0].plans[0].id);",
									"",
									"    pm.test(\"412 GET Services v1/providers/:providerId/services\", () => {",
									"        pm.response.to.have.header(\"X-Request-ID\");",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}/v1/providers/{{providerId}}/services",
							"host": [
								"{{URL}}"
							],
							"path": [
								"v1",
								"providers",
								"{{providerId}}",
								"services"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET Services - Manifest Test",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b36a3e9a-d32a-4945-8aa0-b8bbba39e10e",
								"exec": [
									"pm.test(\"Validate GET v1/providers/:providerid/services Response Code\", function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const serviceBodySchema = {",
									"    \"required\": [\"services\"],",
									"    \"properties\": {",
									"        \"services\": [{",
									"            \"id\": \"string\",",
									"            \"description\": \"string\",",
									"            \"name\": \"string\",",
									"            \"plans\": [{}]",
									"        }]",
									"    }",
									"};",
									"",
									"var serviceBody = JSON.parse(responseBody);",
									"tests[\"Validate GET v1/providers/:providerid/services schema\"] = tv4.validate(serviceBody, serviceBodySchema);",
									"",
									"pm.environment.set(\"serviceId\", pm.response.json().services[0].id);",
									"pm.environment.set(\"planId\", pm.response.json().services[0].plans[0].id);",
									"",
									"pm.test(\"412 GET Services v1/providers/:providerId/services\", () => {",
									"    pm.response.to.have.header(\"X-Request-ID\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}/v1/providers/{{Manifest_providerId}}/services",
							"host": [
								"{{URL}}"
							],
							"path": [
								"v1",
								"providers",
								"{{Manifest_providerId}}",
								"services"
							]
						}
					},
					"response": []
				},
				{
					"name": "401 Validate GET Services",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b36a3e9a-d32a-4945-8aa0-b8bbba39e10e",
								"exec": [
									"pm.test(\"401 Validate GET Services v1/providers Response Code\", function() {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test(\"401 Validate GET Services v1/providers providerId\", () => {",
									"    pm.expect(pm.response.json().errorCode).to.equal(\"UNAUTHORIZED\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}/v1/providers/{{providerId}}/services",
							"host": [
								"{{URL}}"
							],
							"path": [
								"v1",
								"providers",
								"{{providerId}}",
								"services"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET Service Instances Before Creating the instance",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b36a3e9a-d32a-4945-8aa0-b8bbba39e10e",
								"exec": [
									"if (pm.response.to.have.status(401)) {",
									"    console.log(\"Untrusted Broker\")",
									"} else {",
									"    pm.test(\"Validate GET Service Instances Before Creating the instance v1/providers/:providerid/service_instances Response Code\", function() {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    const serviceBodySchema = {",
									"        \"properties\": {}",
									"    };",
									"",
									"    var serviceBody = JSON.parse(responseBody);",
									"    tests[\"Validate GET Service Instances Before Creating the instance v1/providers/:providerid/service_instances schema\"] = tv4.validate(serviceBody, serviceBodySchema);",
									"",
									"    pm.test(\"412 GET Service Instance v1/providers/:providerId/service_instance\", () => {",
									"        pm.response.to.have.header(\"X-Request-ID\");",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}/v1/providers/{{providerId}}/service_instances",
							"host": [
								"{{URL}}"
							],
							"path": [
								"v1",
								"providers",
								"{{providerId}}",
								"service_instances"
							]
						}
					},
					"response": []
				},
				{
					"name": "401 Validate GET Service Instances",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b36a3e9a-d32a-4945-8aa0-b8bbba39e10e",
								"exec": [
									"pm.test(\"401 Validate GET Service Instances v1/providers Response Code\", function() {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test(\"401 Validate GET Service Instances v1/providers providerId\", () => {",
									"    pm.expect(pm.response.json().errorCode).to.equal(\"UNAUTHORIZED\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}/v1/providers/{{providerId}}/service_instances",
							"host": [
								"{{URL}}"
							],
							"path": [
								"v1",
								"providers",
								"{{providerId}}",
								"service_instances"
							]
						}
					},
					"response": []
				},
				{
					"name": "PUT Service Instance 200 Status",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "aa957d51-730b-4edd-bb1f-e6aab8938e47",
								"exec": [
									"var uuid = require('uuid');",
									"pm.environment.set(\"instanceId\", uuid.v4())"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "5c64cfdf-e870-4788-b2f2-471702ec4af2",
								"exec": [
									"if (pm.response.to.have.status(401)) {",
									"    console.log(\"Untrusted Broker\")",
									"} else {",
									"    pm.test(\"Validate PUT v1/providers/:providerid/service_instances/:instanceId Response Code\", function() {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    const serviceInstanceBodySchema = {",
									"        \"required\": [\"dashboard_url\"],",
									"        \"properties\": {",
									"            \"dashboard_url\": {",
									"                \"type\": \"string\"",
									"            }",
									"        }",
									"    };",
									"",
									"    var serviceInstanceBody = JSON.parse(responseBody);",
									"    tests[\"Validate PUT v1/providers/:providerid/service_instances/:instanceId schema\"] = tv4.validate(serviceInstanceBody, serviceInstanceBodySchema);",
									"",
									"    pm.test(\"412 PUT Service Instance v1/providers/:providerId/service_instances/:instanceid\", () => {",
									"        pm.response.to.have.header(\"X-Request-ID\");",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"service_id\": \"{{serviceId}}\",\n    \"plan_id\": \"{{planId}}\"\n}"
						},
						"url": {
							"raw": "{{URL}}/v1/providers/{{providerId}}/service_instances/{{instanceId}}?accepts_incomplete=true",
							"host": [
								"{{URL}}"
							],
							"path": [
								"v1",
								"providers",
								"{{providerId}}",
								"service_instances",
								"{{instanceId}}"
							],
							"query": [
								{
									"key": "accepts_incomplete",
									"value": "true"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "PUT Service Instance 200 Status - Manifest Test",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "aa957d51-730b-4edd-bb1f-e6aab8938e47",
								"exec": [
									"var uuid = require('uuid');",
									"pm.environment.set(\"Manifest_instanceId\", uuid.v4())"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "5c64cfdf-e870-4788-b2f2-471702ec4af2",
								"exec": [
									"pm.test(\"Validate PUT v1/providers/:providerid/service_instances/:instanceId Response Code\", function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const serviceInstanceBodySchema = {",
									"    \"required\": [\"dashboard_url\"],",
									"    \"properties\": {",
									"        \"dashboard_url\": {",
									"            \"type\": \"string\"",
									"        }",
									"    }",
									"};",
									"",
									"var serviceInstanceBody = JSON.parse(responseBody);",
									"tests[\"Validate PUT v1/providers/:providerid/service_instances/:instanceId schema\"] = tv4.validate(serviceInstanceBody, serviceInstanceBodySchema);",
									"",
									"pm.test(\"412 PUT Service Instance v1/providers/:providerId/service_instances/:instanceid\", () => {",
									"    pm.response.to.have.header(\"X-Request-ID\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"service_id\": \"{{serviceId}}\",\n    \"plan_id\": \"{{planId}}\"\n}"
						},
						"url": {
							"raw": "{{URL}}/v1/providers/{{Manifest_providerId}}/service_instances/{{Manifest_instanceId}}?accepts_incomplete=true",
							"host": [
								"{{URL}}"
							],
							"path": [
								"v1",
								"providers",
								"{{Manifest_providerId}}",
								"service_instances",
								"{{Manifest_instanceId}}"
							],
							"query": [
								{
									"key": "accepts_incomplete",
									"value": "true"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "401 Validate PUT Service Instance",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "aa957d51-730b-4edd-bb1f-e6aab8938e47",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "5c64cfdf-e870-4788-b2f2-471702ec4af2",
								"exec": [
									"pm.test(\"401 Validate PUT Service Instance v1/providers Response Code\", function() {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test(\"401 Validate PUT Service Instance v1/providers providerId\", () => {",
									"    pm.expect(pm.response.json().errorCode).to.equal(\"UNAUTHORIZED\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"service_id\": \"{{serviceId}}\",\n    \"plan_id\": \"{{planId}}\"\n}"
						},
						"url": {
							"raw": "{{URL}}/v1/providers/{{providerId}}/service_instances/{{instanceId}}?accepts_incomplete=true",
							"host": [
								"{{URL}}"
							],
							"path": [
								"v1",
								"providers",
								"{{providerId}}",
								"service_instances",
								"{{instanceId}}"
							],
							"query": [
								{
									"key": "accepts_incomplete",
									"value": "true"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET Service Instance Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b36a3e9a-d32a-4945-8aa0-b8bbba39e10e",
								"exec": [
									"if (pm.response.to.have.status(401)) {",
									"    console.log(\"Untrusted Broker\")",
									"} else {",
									"    pm.test(\"Validate GET Service Instance Id v1/providers/:providerid/service_instances/:instanceId Response Code\", function() {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    const serviceBodySchema = {",
									"        \"required\": [\"id\"],",
									"        \"properties\": {",
									"            \"id\": \"string\"",
									"        }",
									"    };",
									"",
									"    var serviceBody = JSON.parse(responseBody);",
									"    tests[\"Validate GET Service Instance Id v1/providers/:providerid/service_instances/:instanceId schema\"] = tv4.validate(serviceBody, serviceBodySchema);",
									"",
									"    pm.test(\"412 GET Service Instance v1/providers/:providerId/service_instances/:instanceid\", () => {",
									"        pm.response.to.have.header(\"X-Request-ID\");",
									"    });",
									"",
									"    pm.test(\"Validate GET v1/providers/:providerid/service_instance/:id Response Code\", function() {",
									"        pm.expect(pm.response.json().id).to.equal(pm.environment.get(\"Manifest_instanceId\"));",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}/v1/providers/{{providerId}}/service_instances/{{instanceId}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"v1",
								"providers",
								"{{providerId}}",
								"service_instances",
								"{{instanceId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "401 Validate GET Service Instance Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b36a3e9a-d32a-4945-8aa0-b8bbba39e10e",
								"exec": [
									"pm.test(\"401 Validate GET Service Instance Id v1/providers Response Code\", function() {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test(\"401 Validate GET Service Instance Id v1/providers providerId\", () => {",
									"    pm.expect(pm.response.json().errorCode).to.equal(\"UNAUTHORIZED\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}/v1/providers/{{providerId}}/service_instances/{{instanceId}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"v1",
								"providers",
								"{{providerId}}",
								"service_instances",
								"{{instanceId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET Service Instances Status Post Creating Instance - In Progress",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b36a3e9a-d32a-4945-8aa0-b8bbba39e10e",
								"exec": [
									"if (pm.response.to.have.status(401)) {",
									"    console.log(\"Untrusted Broker\")",
									"} else {",
									"    pm.test(\"Validate GET Service Instances Status Post Creating Instance v1/providers/:providerid/service_instances/:instanceId/status Response Code\", function() {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    const serviceBodySchema = {",
									"        \"required\": [\"state\", \"description\"],",
									"        \"properties\": {",
									"            \"description\": {",
									"                \"type\": \"string\"",
									"            },",
									"            \"state\": {",
									"                \"type\": \"string\"",
									"            },",
									"        }",
									"    };",
									"",
									"    var serviceBody = JSON.parse(responseBody);",
									"    tests[\"Validate GET Service Instances Status Post Creating Instance v1/providers/:providerid/service_instances/:instanceId schema\"] = tv4.validate(serviceBody, serviceBodySchema);",
									"",
									"    pm.test(\"412 GET Service Instance status v1/providers/:providerId/service_instances/:instanceid/status\", () => {",
									"        pm.response.to.have.header(\"X-Request-ID\");",
									"    });",
									"",
									"    pm.test(\"GET Service Instances Status Post Creating Instance v1/providers/:providerId/service_instance/:instanceId/status\", () => {",
									"        pm.expect(pm.response.json().state).to.equal(\"in progress\");",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}/v1/providers/{{providerId}}/service_instances/{{instanceId}}/status",
							"host": [
								"{{URL}}"
							],
							"path": [
								"v1",
								"providers",
								"{{providerId}}",
								"service_instances",
								"{{instanceId}}",
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET Service Instances Status Post Creating Instance - In Progress - Manifest Test",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b36a3e9a-d32a-4945-8aa0-b8bbba39e10e",
								"exec": [
									"    pm.test(\"Validate GET Service Instances Status Post Creating Instance v1/providers/:providerid/service_instances/:instanceId/status Response Code\", function() {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    const serviceBodySchema = {",
									"        \"required\": [\"state\", \"description\"],",
									"        \"properties\": {",
									"            \"description\": {",
									"                \"type\": \"string\"",
									"            },",
									"            \"state\": {",
									"                \"type\": \"string\"",
									"            },",
									"        }",
									"    };",
									"",
									"    var serviceBody = JSON.parse(responseBody);",
									"    tests[\"Validate GET Service Instances Status Post Creating Instance v1/providers/:providerid/service_instances/:instanceId schema\"] = tv4.validate(serviceBody, serviceBodySchema);",
									"",
									"    pm.test(\"412 GET Service Instance status v1/providers/:providerId/service_instances/:instanceid/status\", () => {",
									"        pm.response.to.have.header(\"X-Request-ID\");",
									"    });",
									"",
									"    pm.test(\"GET Service Instances Status Post Creating Instance v1/providers/:providerId/service_instance/:instanceId/status\", () => {",
									"        pm.expect(pm.response.json().state).to.equal(\"in progress\");",
									"    });"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}/v1/providers/{{Manifest_providerId}}/service_instances/{{Manifest_instanceId}}/status",
							"host": [
								"{{URL}}"
							],
							"path": [
								"v1",
								"providers",
								"{{Manifest_providerId}}",
								"service_instances",
								"{{Manifest_instanceId}}",
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET Service Instances Status Post Creating Instance - successed",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b36a3e9a-d32a-4945-8aa0-b8bbba39e10e",
								"exec": [
									"if (pm.response.to.have.status(401)) {",
									"    console.log(\"Untrusted Broker\")",
									"} else {",
									"    pm.test(\"Validate GET Service Instances Status Post Creating Instance v1/providers/:providerid/service_instances/:instanceId/status Response Code\", function() {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    const serviceBodySchema = {",
									"        \"required\": [\"state\", \"description\"],",
									"        \"properties\": {",
									"            \"description\": {",
									"                \"type\": \"string\"",
									"            },",
									"            \"state\": {",
									"                \"type\": \"string\"",
									"            },",
									"        }",
									"    };",
									"",
									"    var serviceBody = JSON.parse(responseBody);",
									"    tests[\"Validate GET Service Instances Status Post Creating Instance v1/providers/:providerid/service_instances/:instanceId schema\"] = tv4.validate(serviceBody, serviceBodySchema);",
									"",
									"    pm.test(\"412 GET Service Instance status v1/providers/:providerId/service_instances/:instanceid/status\", () => {",
									"        pm.response.to.have.header(\"X-Request-ID\");",
									"    });",
									"",
									"    pm.test(\"GET Service Instances Status Post Creating Instance v1/providers/:providerId/service_instance/:instanceId/status\", () => {",
									"        pm.expect(pm.response.json().state).to.equal(\"succeeded\");",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}/v1/providers/{{providerId}}/service_instances/{{instanceId}}/status",
							"host": [
								"{{URL}}"
							],
							"path": [
								"v1",
								"providers",
								"{{providerId}}",
								"service_instances",
								"{{instanceId}}",
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET Service Instances Status Post Creating Instance - successed - Manifest File",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b36a3e9a-d32a-4945-8aa0-b8bbba39e10e",
								"exec": [
									"    pm.test(\"Validate GET Service Instances Status Post Creating Instance v1/providers/:providerid/service_instances/:instanceId/status Response Code\", function() {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    const serviceBodySchema = {",
									"        \"required\": [\"state\", \"description\"],",
									"        \"properties\": {",
									"            \"description\": {",
									"                \"type\": \"string\"",
									"            },",
									"            \"state\": {",
									"                \"type\": \"string\"",
									"            },",
									"        }",
									"    };",
									"",
									"    var serviceBody = JSON.parse(responseBody);",
									"    tests[\"Validate GET Service Instances Status Post Creating Instance v1/providers/:providerid/service_instances/:instanceId schema\"] = tv4.validate(serviceBody, serviceBodySchema);",
									"",
									"    pm.test(\"412 GET Service Instance status v1/providers/:providerId/service_instances/:instanceid/status\", () => {",
									"        pm.response.to.have.header(\"X-Request-ID\");",
									"    });",
									"",
									"    pm.test(\"GET Service Instances Status Post Creating Instance v1/providers/:providerId/service_instance/:instanceId/status\", () => {",
									"        pm.expect(pm.response.json().state).to.equal(\"succeeded\");",
									"    });"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}/v1/providers/{{Manifest_providerId}}/service_instances/{{Manifest_instanceId}}/status",
							"host": [
								"{{URL}}"
							],
							"path": [
								"v1",
								"providers",
								"{{Manifest_providerId}}",
								"service_instances",
								"{{Manifest_instanceId}}",
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "401 Validate GET Service Instances Status",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b36a3e9a-d32a-4945-8aa0-b8bbba39e10e",
								"exec": [
									"pm.test(\"401 Validate GET Service Instances Status v1/providers Response Code\", function() {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test(\"401 Validate GET Service Instances Status v1/providers providerId\", () => {",
									"    pm.expect(pm.response.json().errorCode).to.equal(\"UNAUTHORIZED\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}/v1/providers/{{providerId}}/service_instances/{{instanceId}}/status",
							"host": [
								"{{URL}}"
							],
							"path": [
								"v1",
								"providers",
								"{{providerId}}",
								"service_instances",
								"{{instanceId}}",
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET Service Instances",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b36a3e9a-d32a-4945-8aa0-b8bbba39e10e",
								"exec": [
									"if (pm.response.to.have.status(401)) {",
									"    console.log(\"Untrusted Broker\")",
									"} else {",
									"    pm.test(\"Validate GET Service Instances v1/providers/:providerid/service_instances Response Code\", function() {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    const serviceBodySchema = {",
									"        \"required\": [\"id\"],",
									"        \"properties\": {",
									"            \"id\": \"string\"",
									"        }",
									"    };",
									"",
									"    var serviceBody = JSON.parse(responseBody);",
									"    tests[\"Validate GET Service Instances v1/providers/:providerid/service_instances schema\"] = tv4.validate(serviceBody, serviceBodySchema);",
									"",
									"    pm.test(\"Validate GET v1/providers/:providerid/service_instances Response Code\", function() {",
									"        pm.expect(pm.response.json().id).to.equal(pm.environment.get(\"Manifest_instanceId\"));",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}/v1/providers/{{providerId}}/service_instances",
							"host": [
								"{{URL}}"
							],
							"path": [
								"v1",
								"providers",
								"{{providerId}}",
								"service_instances"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE Service Instance",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b4d60af8-cd08-4d5d-a275-faca8b65ac0d",
								"exec": [
									"if (pm.response.to.have.status(401)) {",
									"    console.log(\"Untrusted Broker\")",
									"} else {",
									"    pm.test(\"Validate DELETE v1/providers/:providerid/service_instances/:instanceId Response Code\", function() {",
									"        pm.response.to.have.status(202);",
									"    });",
									"",
									"    pm.test(\"412 DELETE Service Instance v1/providers/:providerId/services_instances/:instancesid\", () => {",
									"        pm.response.to.have.header(\"X-Request-ID\");",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{URL}}/v1/providers/{{providerId}}/service_instances/{{instanceId}}?accepts_incomplete=true&service_id={{serviceId}}&plan_id={{planId}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"v1",
								"providers",
								"{{providerId}}",
								"service_instances",
								"{{instanceId}}"
							],
							"query": [
								{
									"key": "accepts_incomplete",
									"value": "true"
								},
								{
									"key": "service_id",
									"value": "{{serviceId}}"
								},
								{
									"key": "plan_id",
									"value": "{{planId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE Service Instance - Manifest Test",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b4d60af8-cd08-4d5d-a275-faca8b65ac0d",
								"exec": [
									"    pm.test(\"Validate DELETE v1/providers/:providerid/service_instances/:instanceId Response Code\", function() {",
									"        pm.response.to.have.status(202);",
									"    });",
									"",
									"    pm.test(\"412 DELETE Service Instance v1/providers/:providerId/services_instances/:instancesid\", () => {",
									"        pm.response.to.have.header(\"X-Request-ID\");",
									"    });"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{URL}}/v1/providers/{{Manifest_providerId}}/service_instances/{{Manifest_instanceId}}?accepts_incomplete=true&service_id={{serviceId}}&plan_id={{planId}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"v1",
								"providers",
								"{{Manifest_providerId}}",
								"service_instances",
								"{{Manifest_instanceId}}"
							],
							"query": [
								{
									"key": "accepts_incomplete",
									"value": "true"
								},
								{
									"key": "service_id",
									"value": "{{serviceId}}"
								},
								{
									"key": "plan_id",
									"value": "{{planId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "401 Validate DELETE Service Instance",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b4d60af8-cd08-4d5d-a275-faca8b65ac0d",
								"exec": [
									"pm.test(\"401 Validate DELETE Service Instance v1/providers Response Code\", function() {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test(\"401 Validate DELETE Service Instance v1/providers providerId\", () => {",
									"    pm.expect(pm.response.json().errorCode).to.equal(\"UNAUTHORIZED\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{URL}}/v1/providers/{{providerId}}/service_instances/{{instanceId}}?accepts_incomplete=true&service_id={{serviceId}}&plan_id={{planId}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"v1",
								"providers",
								"{{providerId}}",
								"service_instances",
								"{{instanceId}}"
							],
							"query": [
								{
									"key": "accepts_incomplete",
									"value": "true"
								},
								{
									"key": "service_id",
									"value": "{{serviceId}}"
								},
								{
									"key": "plan_id",
									"value": "{{planId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET Service Instance Id Post Deleting Instance",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b36a3e9a-d32a-4945-8aa0-b8bbba39e10e",
								"exec": [
									"if (pm.response.to.have.status(401)) {",
									"    console.log(\"Untrusted Broker\")",
									"} else {",
									"    pm.test(\"Validate GET Service Instances v1/providers/:providerid/service_instances/:instanceId Response Code\", function() {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    const serviceBodySchema = {",
									"        \"properties\": {}",
									"    };",
									"",
									"    var serviceBody = JSON.parse(responseBody);",
									"    tests[\"Validate GET Service Instances v1/providers/:providerid/service_instances/:instanceId schema\"] = tv4.validate(serviceBody, serviceBodySchema);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}/v1/providers/{{providerId}}/service_instances/{{instanceId}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"v1",
								"providers",
								"{{providerId}}",
								"service_instances",
								"{{instanceId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET Service Instances Status Post Deleting Instance",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b36a3e9a-d32a-4945-8aa0-b8bbba39e10e",
								"exec": [
									"if (pm.response.to.have.status(401)) {",
									"    console.log(\"Untrusted Broker\")",
									"} else {",
									"    pm.test(\"Validate GET Service Instances Status Post Deleting Instance v1/providers/:providerid/service_instances/:instanceId/status Response Code\", function() {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    const serviceBodySchema = {",
									"        \"required\": [\"state\", \"description\"],",
									"        \"properties\": {",
									"            \"description\": {",
									"                \"type\": \"string\"",
									"            },",
									"            \"state\": {",
									"                \"type\": \"string\"",
									"            },",
									"        }",
									"    };",
									"",
									"    var serviceBody = JSON.parse(responseBody);",
									"    tests[\"Validate GET Service Instances Status Post Deleting Instance v1/providers/:providerid/service_instances/:instanceId/status schema\"] = tv4.validate(serviceBody, serviceBodySchema);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}/v1/providers/{{providerId}}/service_instances/{{instanceId}}/status",
							"host": [
								"{{URL}}"
							],
							"path": [
								"v1",
								"providers",
								"{{providerId}}",
								"service_instances",
								"{{instanceId}}",
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET Service Instances After Deleting the Instance",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b36a3e9a-d32a-4945-8aa0-b8bbba39e10e",
								"exec": [
									"if (pm.response.to.have.status(401)) {",
									"    console.log(\"Untrusted Broker\")",
									"} else {",
									"    pm.test(\"Validate GET Service Instances After Deleting the Instance v1/providers/:providerid/service_instances Response Code\", function() {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    const serviceBodySchema = {",
									"        \"properties\": {}",
									"    };",
									"",
									"    var serviceBody = JSON.parse(responseBody);",
									"    tests[\"Validate GET Service Instances After Deleting the Instance v1/providers/:providerid/service_instances schema\"] = tv4.validate(serviceBody, serviceBodySchema);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}/v1/providers/{{providerId}}/service_instances",
							"host": [
								"{{URL}}"
							],
							"path": [
								"v1",
								"providers",
								"{{providerId}}",
								"service_instances"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE Provider",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "719bf8ad-8a6e-4bad-9c6d-18c79a267e1b",
								"exec": [
									"pm.test(\"Validate DELETE v1/provider Response Code\", function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Validate DELETE v1/provider providerId\", () => {",
									"    pm.expect(pm.response.json().providerId).to.equal(pm.environment.get(\"providerId\"));",
									"});",
									"",
									"pm.test(\"412 DELETE Provider v1/providers\", () => {",
									"    pm.response.to.have.header(\"X-Request-ID\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{URL}}/v1/providers/{{providerId}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"v1",
								"providers",
								"{{providerId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "401 Validate DELETE Provider",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "719bf8ad-8a6e-4bad-9c6d-18c79a267e1b",
								"exec": [
									"pm.test(\"401 Validate DELETE Provider v1/providers Response Code\", function() {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test(\"401 Validate DELETE Provider v1/providers providerId\", () => {",
									"    pm.expect(pm.response.json().errorCode).to.equal(\"UNAUTHORIZED\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{URL}}/v1/providers/{{providerId}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"v1",
								"providers",
								"{{providerId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Negative DELETE Provider",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1ba028c5-d8ab-4757-a68f-c640f3c2dc11",
								"exec": [
									"pm.test(\"Validate DELETE v1/provider Response Code\", function() {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{URL}}/v1/providers/{{providerId}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"v1",
								"providers",
								"{{providerId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PUT Provider - Refresh",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f0b471a5-54b8-4b12-a278-2a498b5e817f",
								"exec": [
									"pm.test(\"Validate GET v1/providers Response Code\", function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Validate GET v1/providers Response Code\", function() {",
									"    var flag = 0",
									"    for (var i = 0; i < pm.response.json().length; i++) {",
									"        if(pm.response.json()[i][\"displayName\"] == \"Manifest_Provider\"){",
									"            flag = 1",
									"        }",
									"    }",
									"    var assert = require('assert');",
									"    assert(flag == 1, \"Put v1/provider refresh failed\");",
									"});",
									"",
									"pm.test(\"412 GET Provider v1/providers\", () => {",
									"    pm.response.to.have.header(\"X-Request-ID\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "{{URL}}/v1/providers",
							"host": [
								"{{URL}}"
							],
							"path": [
								"v1",
								"providers"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET Provider Information Post Provider Delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3bdc367c-8fbc-4947-a317-60dbeb855818",
								"exec": [
									"pm.test(\"Validate GET v1/provider Response Code. Post Delete Provider\", function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Validate GET v1/provider providerId. Post Delete Provider\", () => {",
									"    pm.expect(pm.response.json().total).to.equal(1);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{URL}}/v1/providers",
							"host": [
								"{{URL}}"
							],
							"path": [
								"v1",
								"providers"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"auth": {
		"type": "basic",
		"basic": [
			{
				"key": "password",
				"value": "{{PASSWORD}}",
				"type": "string"
			},
			{
				"key": "username",
				"value": "{{USERNAME}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "d1d5b796-60c9-4079-92d0-5f9689ba1c44",
				"type": "text/javascript",
				"exec": [
					"pm.request.headers.add({",
					"    key: 'Content-Type',",
					"    value: 'application/json'",
					"});",
					"if (pm.expect(pm.environment.get(\"HOSTHEADER\")) === \"HOSTNAME\") {",
					"    console.log(\"Not Setting Host Header\");",
					"} else {",
					"    pm.request.headers.add({",
					"        key: 'Host',",
					"        value: pm.environment.get(\"HOSTHEADER\")",
					"    });",
					"}",
					"pm.request.headers.add({",
					"    key: 'X-MP-VERSIONS',",
					"    value: \"v1alpha-dev\"",
					"});",
					"pm.request.headers.add({",
					"    key: 'X-Broker-API-Version',",
					"    value: \"2.14\"",
					"});",
					"pm.request.headers.add({",
					"    key: 'X-Broker-API-Originating-Identity',",
					"    value: \"Marketplace\"",
					"});"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "3e35c306-841d-494d-bd1a-4243dfea0bdd",
				"type": "text/javascript",
				"exec": [
					"console.log(\"Request header : \" + pm.request.headers);",
					"if (request.data !== undefined) {",
					"    console.log(\"Request body : \" + request.data);",
					"}",
					"",
					"console.log(\"Response header : \" + pm.response.headers);",
					"console.log(\"Response body : \" + responseBody);"
				]
			}
		}
	]
}